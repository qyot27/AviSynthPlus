<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type" />
<link rel="STYLESHEET" href="filtersdk.css" type="text/css" /><title>SimpleSample - AviSynth</title></head>
<body>
<h1><span style="text-decoration: none;">SimpleSample</span></h1>
<div id="body">
<p>I have rewritten SimpleSample for AviSynth 2.6. I changed it
into an in place filter (so the source is overwritten). It draws a
white square in the center of the clip and it supports all
colorformats.
</p>
<p>Here's simplesample.cpp:
</p>
<pre>#include &lt;windows.h&gt;
#include "avisynth.h"

class SimpleSample&nbsp;: public GenericVideoFilter {
   int SquareSize;
public:
   SimpleSample(PClip _child, int _SquareSize, IScriptEnvironment* env);
   ~SimpleSample();
   PVideoFrame __stdcall GetFrame(int n, IScriptEnvironment* env);
};

SimpleSample::SimpleSample(PClip _child, int _SquareSize, IScriptEnvironment* env)&nbsp;:
   GenericVideoFilter(_child), SquareSize(_SquareSize) {
   if (vi.width&lt;SquareSize || vi.height&lt;SquareSize) {
      env-&gt;ThrowError("SimpleSample: square doesn't fit into the clip!");
   }
}

SimpleSample::~SimpleSample() {}

PVideoFrame __stdcall SimpleSample::GetFrame(int n, IScriptEnvironment* env) {

   PVideoFrame src = child-&gt;GetFrame(n, env);
   env-&gt;MakeWritable(&amp;src);

   unsigned char* srcp = src-&gt;GetWritePtr();
   int src_pitch = src-&gt;GetPitch();
   int src_width = src-&gt;GetRowSize();
   int src_height = src-&gt;GetHeight();

   int w, h, woffset;

   if (vi.IsRGB24()) {
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/2 - 3*SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;3*SquareSize; w+=3) {
            *(srcp + woffset + w) = 255;
            *(srcp + woffset + w + 1) = 255;
            *(srcp + woffset + w + 2) = 255;
         }															
         srcp += src_pitch;
      }
   }
   if (vi.IsRGB32()) {
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/2 - 4*SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;4*SquareSize; w+=4) {
            *(srcp + woffset + w) = 255;
            *(srcp + woffset + w + 1) = 255;
            *(srcp + woffset + w + 2) = 255;
         }
         srcp += src_pitch;
      }
   }
/*
   if (vi.IsRGB32()) { // variant 1 - processing a pixel at once
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/8 - SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize; w++) {
            *((unsigned int *)srcp + woffset + w) = 0x00FFFFFF;
         }	
         srcp += src_pitch;
      }
   }
*/
/*
   if (vi.IsRGB32()) { // variant 2 - processing a pixel at once
      unsigned int* srcp = (unsigned int*)src-&gt;GetWritePtr();
	
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch/4;

      woffset = src_width/8 - SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize; w++) {
            srcp[woffset + w] = 0x00FFFFFF;
         }	
         srcp += src_pitch/4;
      }
   }
*/
   if (vi.IsYUY2()) {
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/8 - SquareSize/4;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize/2; w++) {
            *((unsigned int *)srcp + woffset + w) = 0x80EB80EB;
         }
         srcp += src_pitch; 
      }
   }
   if (vi.IsPlanar() &amp;&amp; vi.IsYUV()) {

      int planes[] = {PLANAR_Y, PLANAR_U, PLANAR_V};
      int square_value[] = {235, 128, 128};
      int p;
      int width_sub, height_sub;

      for (p=0; p&lt;3; p++) {
         srcp = src-&gt;GetWritePtr(planes[p]);		
         src_pitch = src-&gt;GetPitch(planes[p]);
         src_width = src-&gt;GetRowSize(planes[p]);
         src_height = src-&gt;GetHeight(planes[p]);
         width_sub = vi.GetPlaneWidthSubsampling(planes[p]);
         height_sub = vi.GetPlaneHeightSubsampling(planes[p]);

         srcp = srcp + (src_height/2 - (SquareSize&gt;&gt;height_sub)/2) * src_pitch;

         woffset = src_width/2 - (SquareSize&gt;&gt;width_sub)/2;

         for (h=0; h&lt;(SquareSize&gt;&gt;height_sub); h++) {
            for (w=0; w&lt;(SquareSize&gt;&gt;width_sub); w++) {
               srcp[woffset + w] = square_value[p];
            }
            srcp += src_pitch;
         }
      }
   }

   return src;
}

AVSValue __cdecl Create_SimpleSample(AVSValue args, void* user_data, IScriptEnvironment* env) {
   return new SimpleSample(args[0].AsClip(),   
                           args[1].AsInt(100),
                           env); 
}

const AVS_Linkage *AVS_linkage = 0;

extern "C" __declspec(dllexport) const char* __stdcall AvisynthPluginInit3(IScriptEnvironment* env, const AVS_Linkage* const vectors) {
   AVS_linkage = vectors;
   env-&gt;AddFunction("SimpleSample", "c[size]i", Create_SimpleSample, 0);
   return "SimpleSample plugin";
}</pre>
<p>Compile this file into a DLL named InvertNeg.dll. See <a href="CompilingAvisynthPlugins.htm" title="Filter SDK/Compiling instructions">compiling
instructions</a>. Now create an Avisynth script which looks
something like this:
</p>
<pre>LoadPlugin("d:\path\simplesample.dll")
Colorbars().Trim(0,1)
ConvertTORGB32()
# ConvertTOYV411()
SimpleSample(100)
</pre>
<h3><span class="editsection"></span><span class="mw-headline" id="Line_by_line_breakdown">&nbsp;Line
by line breakdown </span></h3><p>Here's a line-by-line breakdown of simplesample.cpp. I won't repeat 
the comments in the previous example InvertNeg.cpp, so read that first 
if needed. The declaration of the class is as follows
</p>
<pre>class SimpleSample&nbsp;: public GenericVideoFilter {
   int SquareSize;
public:
   SimpleSample(PClip _child,	int _SquareSize, IScriptEnvironment* env);
   ~SimpleSample();
   PVideoFrame __stdcall GetFrame(int n, IScriptEnvironment* env);
};
</pre>
<p>With respect to our previous example there are two differences. It 
contains a private data member 'SquareSize' (members are private by 
default). Note that this is our parameter variable. These have to be 
declared here.
</p><p>The member function ~SimpleSample() is the declaration of the 
destructor. It fulfills the opposite functionality as the constructor. 
It is automatically called when the filter is destroyed. It is used to 
release allocated memory when the filter is destroyed. This is needed 
when there is memory allocated in the constructor. This is not the case 
in our filter, so we didn't need to declare it.
</p>
<pre>SimpleSample::~SimpleSample() {}
</pre>
<p>This is the actual destructor. You can release allocated memory here using the operator delete.
</p>
<pre>SimpleSample::SimpleSample(PClip _child, int _SquareSize, IScriptEnvironment* env)&nbsp;:
   GenericVideoFilter(_child), SquareSize(_SquareSize) {
   if (vi.width&lt;SquareSize || vi.height&lt;SquareSize) {
      env-&gt;ThrowError("SimpleSample: square doesn't fit into the clip!");
   }
}
</pre>
<p>This is the constructor. It initializes the value of SquareSize with 
the parameter that is passed to it (which is called _SquareSize here). 
It also checks whether the square which will be drawn fits in the frame,
 otherwise it will return an error.
</p>
<pre>   unsigned char* srcp = src-&gt;GetWritePtr();
   int src_pitch = src-&gt;GetPitch();
   int src_width = src-&gt;GetRowSize();
   int src_height = src-&gt;GetHeight();
</pre>
<p>The default value of plane is PLANAR_Y (= 0) for the functions 
GetReadPtr, GetWritePtr, GetPitch, GetRowSize and GetHeight. For planar 
formats this is the luma plane and for interleaved formats this is the 
whole frame.
</p>
<pre>   if (vi.IsRGB24()) {
</pre>
<p>When the clip has color format RGB24 the code path is taken. For 
RGB24 each pixel is represented by three bytes, blue, green and red (in 
that order). RGB is up side down, so srcp[0] will be the bottom-left 
pixel.
</p>
<pre>      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;
</pre>
<p>The pointer is moved to the lower line of the square that will be drawn.
Remember that src_height is the height in pixels.
</p>
<pre>      woffset = src_width/2 - 3*SquareSize/2;
</pre>
<p>The offset is calculated of the left most byte of the square that 
will be drawn. Remember that src_width is the width in bytes. Since 
SquareSize is specified in pixels, the corresponding number of bytes is 
3*SquareSize.
</p>
<pre>      for (h=0; h&lt;SquareSize; h++) {         // Loop from bottom line to top line.
         for (w=0; w&lt;3*SquareSize; w+=3) {   // Loop from left side of the image to the right side 1 pixel (3 bytes) at a time
            *(srcp + woffset + w) = 255;     // this is the same as srcp[woffset+w]=255;
            *(srcp + woffset + w + 1) = 255; // this is the same as srcp[woffset+w+1]=255;
            *(srcp + woffset + w + 2) = 255; // this is the same as srcp[woffset+w+2]=255;
         }															
         srcp += src_pitch;
      }
   }
</pre>
<p>Here the white square is drawn. Each color component is set to 255.
</p><p>For RGB32 the following code path is taken
</p>
<pre>   if (vi.IsRGB32()) {
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/2 - 4*SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;4*SquareSize; w+=4) {
            *(srcp + woffset + w) = 255;
            *(srcp + woffset + w + 1) = 255;
            *(srcp + woffset + w + 2) = 255;
         }
         srcp += src_pitch;
      }
   }
</pre>
<p>It's the same as for RGB24, except a pixel is represented by four 
bytes, blue, green, red and alpha (in that order). Since SquareSize is 
specified in pixels, the corresponding number of bytes is 4*SquareSize. 
The fourth color component, the alpha channel, *(srcp + woffset + w + 3)
 is left untouched.
</p><p>It is possible to speed the code above up a bit since you can 
deal with whole 32bit variables at a time. This can be done in several 
ways:
</p>
<pre>   if (vi.IsRGB32()) { // variant 1 - processing a pixel at once
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/8 - SquareSize/2;   // src_width/2 bytes equals src_width/8 pixels

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize; w++) {
            *((unsigned int *)srcp + woffset + w) = 0x00FFFFFF;
         }	
         srcp += src_pitch;
      }
   }
</pre>
<p>You need to cast srcp as unsigned int (instead of unsigned char). 
unsigned int is 4 bytes or 32 bits (it runs from 0 to 2^32-1), which is 
exactly what we need for one pixel. The casting is done in this line
</p>
<pre>            *((unsigned int *)srcp + woffset + w) = 0x00FFFFFF;
</pre>
<p>The value of a white pixel is 0x00FFFFFF (where the alpha pixel is 
set to black). When writing several bytes at once, you need to write the
 right one first and the left one last.
</p><p>It is also possible to declare srcp as unsigned int when defining
 it, but you have to take it into account in the rest of the code:
</p>
<pre>   if (vi.IsRGB32()) { // variant 2 - processing a pixel at once
      unsigned int* srcp = (unsigned int*)src-&gt;GetWritePtr();
	
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch/4;

      woffset = src_width/8 - SquareSize/2;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize; w++) {
            srcp[woffset + w] = 0x00FFFFFF;
         }	
         srcp += src_pitch/4;
      }
   }
</pre>
<p>Remember that src_pitch is given in bytes and it is equal to src_pitch/4 pixels.
</p><p>For YUY2, each 4 byte sequence represents 2 pixels, (Y1, U, Y2 
and then V). So we can write two pixels at once by recasting again.
</p>
<pre>   if (vi.IsYUY2()) {
      srcp = srcp + (src_height/2 - SquareSize/2) * src_pitch;

      woffset = src_width/8 - SquareSize/4;

      for (h=0; h&lt;SquareSize; h++) {
         for (w=0; w&lt;SquareSize/2; w++) {   // we are writing two pixels at once
            *((unsigned int *)srcp + woffset + w) = 0x80EB80EB;   // VY2UY1; Y1=Y2=0xEB=235, U=V=0x80=128
         }
         srcp += src_pitch; 
      }
   }
</pre>
<p>At last we move on to the YUV planar formats. Since we are processing
 the color components independently we can loop over the planes.
</p>
<pre>   if (vi.IsPlanar() &amp;&amp; vi.IsYUV()) {
</pre>
<p>All planar YUV formats in the 2.6 api are: YV24, YV16, YV12, YV411 and Y8.
</p>
<pre>      int planes[] = {PLANAR_Y, PLANAR_U, PLANAR_V};
      int square_value[] = {235, 128, 128};
      int p;
      int width_sub, height_sub;

      for (p=0; p&lt;3; p++) {
         srcp = src-&gt;GetWritePtr(planes[p]);		
         src_pitch = src-&gt;GetPitch(planes[p]);
         src_width = src-&gt;GetRowSize(planes[p]);
         src_height = src-&gt;GetHeight(planes[p]);
         width_sub = vi.GetPlaneWidthSubsampling(planes[p]);
         height_sub = vi.GetPlaneHeightSubsampling(planes[p]);
</pre>
<p>Since the planes have unequal width (measured in bytes; same for height) we will need their subsampling. The functions <a href="VideoInfo.htm" title="Filter SDK/Cplusplus API/VideoInfo">GetPlaneWidthSubsampling</a> and <a href="VideoInfo.htm" title="Filter SDK/Cplusplus API/VideoInfo">GetPlaneHeightSubsampling</a>
 are new in the 2.6 api. They return the horizontal and vertical 
subsampling of the plane compared to the luma plane. The subsampling of 
the formats is:
</p>
<table border="1">

<tbody><tr>
<td> color format
</td>
<td> GetPlaneWidthSubsampling(PLANAR_U)
</td>
<td> GetPlaneHeightSubsampling(PLANAR_U)
</td></tr>
<tr>
<td> YV24
</td>
<td> 0
</td>
<td> 0
</td></tr>
<tr>
<td> YV16
</td>
<td> 1
</td>
<td> 0
</td></tr>
<tr>
<td> YV12
</td>
<td> 1
</td>
<td> 1
</td></tr>
<tr>
<td> YV411
</td>
<td> 2
</td>
<td> 1
</td></tr>
<tr>
<td> Y8
</td>
<td> 0&nbsp;?
</td>
<td> 0&nbsp;?
</td></tr></tbody></table>
<p>The chroma planes PLANAR_U and PLANAR_V have the same subsampling. 
Also GetPlaneWidthSubsampling(PLANAR_Y) = 
GetPlaneHeightSubsampling(PLANAR_Y) = 0 since PLANAR_Y is not 
subsampled.
</p>
<pre>         srcp = srcp + (src_height/2 - (SquareSize&gt;&gt;height_sub)/2) * src_pitch;
</pre>
<p>Note SquareSize is specified in pixels and src_height the height of 
the samples of plane p. Let's look at YV12 for example. For the luma 
plane we have SquareSize&gt;&gt;0 = SquareSize since there is no 
subsampling and for the chroma planes we have SquareSize&gt;&gt;1 = 
SquareSize/2 since there are twice as many luma samples as chroma 
samples horizontally.
</p>
<pre>         woffset = src_width/2 - (SquareSize&gt;&gt;width_sub)/2;
</pre>
<p>The vertical subsampling is taken into account again.
</p>
<pre>         for (h=0; h&lt;(SquareSize&gt;&gt;height_sub); h++) {
            for (w=0; w&lt;(SquareSize&gt;&gt;width_sub); w++) {
               srcp[woffset + w] = square_value[p];
            }
            srcp += src_pitch;
         }
      }
   }
</pre>
<p>Here the white square is drawn. The luma pixels will get the value 
square_value[PLANAR_Y] = 235, and the chroma pixels will get the value 
square_value[PLANAR_U] = 128 (idem for PLANAR_V).
</p>
<pre>AVSValue __cdecl Create_SimpleSample(AVSValue args, void* user_data, IScriptEnvironment* env) {
   return new SimpleSample(args[0].AsClip(),
                           args[1].AsInt(100),
                           env);
}
</pre>
<p>args[0], args[1], ... are the arguments of the filter. Here there are
 two arguments. The first one is of type clip and the second one of type
 int (with default value 100). You can pre-process or post-process your 
variables (and clips) here too. See DirectShowSource for some examples.
</p>
<pre>extern "C" __declspec(dllexport) const char* __stdcall AvisynthPluginInit3(IScriptEnvironment* env, const AVS_Linkage* const vectors) {
   AVS_linkage = vectors;
   env-&gt;AddFunction("SimpleSample", "c[size]i", Create_SimpleSample, 0);
   return "SimpleSample plugin";
}
</pre>
<p>The <a href="Cplusplus_api.htm#AddFunction" title="Filter SDK/Cplusplus API">AddFunction</a>
has the following parameters:
</p>
<pre>AddFunction(Filtername, Arguments, Function to call, 0);
</pre>
<p><i>Arguments</i> is a string that defines the types and optional names of
the arguments for your filter. The possible types are:
</p>
<pre># Argument type specifier strings
 c - clip
 i - integer
 f - float
 s - string
 b - boolean
 . - Any type (dot)
# Array Specifiers (have a look at StackVertical and SelectEvery for example as to how access such arrays)
 i* - Integer Array, zero or more
 i+ - Integer Array, one or more
 .* - Any type Array, zero or more
 .+ - Any type Array, one or more
</pre>
<p>The text inside the [ ] lets you used named parameters in your script. Thus
</p>
<pre>clip = ...
SimpleSample(clip, size=100)
</pre>
<p>but
</p>
<pre>clip = ...
SimpleSample(clip, 100)
</pre><p>works as well. See <a href="InvertNeg.htm" title="Filter SDK/InvertNeg">InvertNeg</a> for more
information.
</p>
<hr style="width: 100%; height: 2px;" />Back to&nbsp;<a href="FilterSDK.htm">FilterSDK</a></div>
<p><kbd>$Date: 2015/09/14 20:23:59 $</kbd></p>
</body></html>
